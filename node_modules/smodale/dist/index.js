/*!
 * @package smodale
 * @author  Skender Moglica <moglica.s@gmail.com>
 * @version 1.0.5
 * @build   Thursday, May 6, 2021 8:13 AM
 */

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.Smodale = {}));
}(this, (function (exports) { 'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function get_store_value(store) {
        let value;
        subscribe(store, _ => value = _)();
        return value;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function compute_rest_props(props, keys) {
        const rest = {};
        keys = new Set(keys);
        for (const k in props)
            if (!keys.has(k) && k[0] !== '$')
                rest[k] = props[k];
        return rest;
    }
    function compute_slots(slots) {
        const result = {};
        for (const key in slots) {
            result[key] = true;
        }
        return result;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = node.ownerDocument;
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function tick() {
        schedule_update();
        return resolved_promise;
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = program.b - t;
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }
    function outro_and_destroy_block(block, lookup) {
        transition_out(block, 1, 1, () => {
            lookup.delete(block.key);
        });
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                block.p(child_ctx, dirty);
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        return new_blocks;
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = [];
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (let i = 0; i < subscribers.length; i += 1) {
                        const s = subscribers[i];
                        s[1]();
                        subscriber_queue.push(s, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.push(subscriber);
            if (subscribers.length === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                const index = subscribers.indexOf(subscriber);
                if (index !== -1) {
                    subscribers.splice(index, 1);
                }
                if (subscribers.length === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    var store = {
      ...writable({ static: [], dynamic: [] }),
      getState() {
        return get_store_value(this);
      },
    };

    const context = {
      hide: () => ({}),
      cancel: () => ({}),
      component: null,
    };

    const getModalContext = () => getContext(context);

    /* src/components/Modal.svelte generated by Svelte v3.37.0 */

    function create_if_block(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let onMount_action;
    	let div2_transition;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	return {
    		c() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			if (default_slot) default_slot.c();
    			attr(div0, "class", "modal__content js-modal__content svelte-190jx0e");
    			attr(div0, "role", "alertdialog");
    			attr(div0, "aria-expanded", "true");
    			attr(div1, "class", "modal__dialog svelte-190jx0e");
    			attr(div2, "class", "modal " + /*classes*/ ctx[6] + " svelte-190jx0e");
    			attr(div2, "data-name", /*name*/ ctx[3]);
    		},
    		m(target, anchor) {
    			insert(target, div2, anchor);
    			append(div2, div1);
    			append(div1, div0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			/*div0_binding*/ ctx[14](div0);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(onMount_action = /*onMount*/ ctx[7].call(null, div2, {
    					currentBreakpoint: /*currentBreakpoint*/ ctx[1]
    				}));

    				mounted = true;
    			}
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && dirty[0] & /*$$scope*/ 4096) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[12], dirty, null, null);
    				}
    			}

    			if (onMount_action && is_function(onMount_action.update) && dirty[0] & /*currentBreakpoint*/ 2) onMount_action.update.call(null, {
    				currentBreakpoint: /*currentBreakpoint*/ ctx[1]
    			});
    		},
    		i(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, /*transition*/ ctx[4], /*transitionParams*/ ctx[5], true);
    				div2_transition.run(1);
    			});

    			current = true;
    		},
    		o(local) {
    			transition_out(default_slot, local);
    			if (!div2_transition) div2_transition = create_bidirectional_transition(div2, /*transition*/ ctx[4], /*transitionParams*/ ctx[5], false);
    			div2_transition.run(0);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div2);
    			if (default_slot) default_slot.d(detaching);
    			/*div0_binding*/ ctx[14](null);
    			if (detaching && div2_transition) div2_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};
    }

    function create_fragment$1(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*modal*/ ctx[2] && /*$$slots*/ ctx[8].default && create_if_block(ctx);

    	return {
    		c() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			if (/*modal*/ ctx[2] && /*$$slots*/ ctx[8].default) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*modal, $$slots*/ 260) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach(if_block_anchor);
    		}
    	};
    }

    const resizeObserverSupported = () => "ResizeObserver" in window;

    const ModalDismissReasons = Object.freeze({
    	BACKDROP_CLICK: "BACKDROP_CLICK",
    	ESC: "ESC"
    });

    const toggleClass = (elm, className, bool) => {
    	if (bool) {
    		return elm.classList.add(className);
    	}

    	return elm.classList.remove(className);
    };

    const toInlineCss = (elm = {}, styles = {}) => {
    	const el = elm;

    	Object.entries(styles).forEach(([key, value]) => {
    		if (!(key in el.style)) {
    			return;
    		}

    		el.style[key] = value || "";
    	});
    };

    function instance$1($$self, $$props, $$invalidate) {
    	let modals;
    	let modal;
    	let sortedBreakpoints;
    	let sortedBreakpointList;
    	const omit_props_names = [];
    	let $$restProps = compute_rest_props($$props, omit_props_names);
    	let $store;
    	component_subscribe($$self, store, $$value => $$invalidate(10, $store = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	const $$slots = compute_slots(slots);
    	const { name, transition = () => null, transitionParams = {}, breakpoints = {}, escapeToClose = true, clickOutsideToClose = true, disableBodyScroll = true, focusOnOpen = true, focusTrap = true, classes = "", ...defaults } = $$restProps;
    	let contentElm;
    	let currentBreakpoint;
    	let firstFocusableElm;
    	let lastFocusableElm;

    	const getAndSetFocusableElms = elm => {
    		const allFocusableElm = [
    			...elm.querySelectorAll("[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex]:not([tabindex=\"-1\"]), [contenteditable], audio[controls], video[controls], summary")
    		];

    		if (!allFocusableElm.length) {
    			return;
    		}

    		const elmIsVisible = element => element.offsetWidth || element.offsetHeight || element.getClientRects().length;

    		for (let i = 0; i < allFocusableElm.length; i += 1) {
    			const el = allFocusableElm[i];

    			if (elmIsVisible(el)) {
    				firstFocusableElm = el;
    				break;
    			}
    		}

    		for (let i = allFocusableElm.length - 1; i >= 0; i -= 1) {
    			const el = allFocusableElm[i];

    			if (elmIsVisible(el)) {
    				lastFocusableElm = el;
    				break;
    			}
    		}

    		if (firstFocusableElm) {
    			firstFocusableElm.focus();
    		}
    	};

    	const emit = createEventDispatcher();
    	const hide = data => modal.hide(name, data);
    	const cancel = data => modal.cancel(name, data);

    	const onModalClick = ({ target }) => {
    		if (target.closest(".js-modal__content")) {
    			return;
    		}

    		cancel(ModalDismissReasons.BACKDROP_CLICK);
    	};

    	const onWindowKeydown = event => {
    		if (!event.keyCode === 27 || event.key !== "Escape") {
    			return;
    		}

    		cancel(ModalDismissReasons.ESC);
    	};

    	const onModalKeydown = event => {
    		if (!event.keyCode === 9 || event.key !== "Tab") {
    			return;
    		}

    		if (firstFocusableElm === document.activeElement && event.shiftKey) {
    			event.preventDefault();
    			lastFocusableElm.focus();
    		}

    		if (lastFocusableElm === document.activeElement && !event.shiftKey) {
    			event.preventDefault();
    			firstFocusableElm.focus();
    		}
    	};

    	setContext(context, {
    		hide,
    		cancel,
    		component: get_current_component()
    	});

    	const updateBreakpoint = () => {
    		if (!modal) {
    			return;
    		}

    		const index = sortedBreakpointList.findIndex(([breakpoint]) => window.matchMedia(`(min-width: ${breakpoint})`).matches);

    		$$invalidate(1, currentBreakpoint = {
    			index,
    			config: index > -1
    			? sortedBreakpointList.filter((item, i) => index <= i).reverse().reduce(
    					// eslint-disable-next-line no-unused-vars
    					(acc, [key, value]) => ({ ...acc, ...value }),
    					{ height: "auto", ...defaults }
    				)
    			: defaults
    		});
    	};

    	const throttle = (callback, wait, immediate = false) => {
    		let timeout = null;
    		let initialCall = true;

    		return (...args) => {
    			const callNow = immediate && initialCall;

    			const next = () => {
    				callback.apply(this, ...args);
    				timeout = null;
    			};

    			if (callNow) {
    				initialCall = false;
    				next();
    			}

    			if (!timeout) {
    				timeout = setTimeout(next, wait);
    			}
    		};
    	};

    	const onWindowResize = throttle(updateBreakpoint, 240);

    	const onMount = elm => {
    		updateBreakpoint();
    		emit("opened");
    		let resizeObserver = null;

    		if (resizeObserverSupported()) {
    			resizeObserver = new ResizeObserver(onWindowResize);
    			resizeObserver.observe(elm);
    		} else {
    			window.addEventListener("resize", onWindowResize);
    		}

    		if (disableBodyScroll) {
    			toInlineCss(document.body, { overflow: "hidden" });
    		}

    		if (focusOnOpen) {
    			getAndSetFocusableElms(elm);

    			if (focusTrap) {
    				elm.addEventListener("keydown", onModalKeydown);
    			}
    		}

    		if (clickOutsideToClose) {
    			elm.addEventListener("click", onModalClick);
    		}

    		if (escapeToClose) {
    			window.addEventListener("keydown", onWindowKeydown);
    		}

    		return {
    			async update() {
    				await tick();
    				const { maxWidth, margin, height, backgroundColor = "#fff", padding = "20px", borderRadius, backdropColor = "rgba(0, 0, 0, 0.6)", boxShadow, centered, scrollable, zIndex = "50" } = currentBreakpoint.config || {};
    				toggleClass(elm, "modal--centered", centered);
    				toggleClass(elm, "modal--scrollable", scrollable);
    				toInlineCss(elm, { zIndex, backgroundColor: backdropColor });

    				toInlineCss(contentElm, {
    					maxWidth,
    					height,
    					margin,
    					backgroundColor,
    					padding,
    					borderRadius,
    					boxShadow
    				});
    			},
    			destroy() {
    				emit("closed");

    				if (disableBodyScroll && !modals.length) {
    					toInlineCss(document.body, { overflow: "" });
    				}

    				if (focusOnOpen && focusTrap) {
    					elm.removeEventListener("keydown", onModalKeydown);
    				}

    				if (clickOutsideToClose) {
    					elm.removeEventListener("click", onModalClick);
    				}

    				if (escapeToClose) {
    					window.removeEventListener("keydown", onWindowKeydown);
    				}

    				if (resizeObserverSupported() && resizeObserver) {
    					resizeObserver.disconnect();
    				} else {
    					window.removeEventListener("resize", onWindowResize);
    				}
    			}
    		};
    	};

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? "unshift" : "push"](() => {
    			contentElm = $$value;
    			$$invalidate(0, contentElm);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    		$$invalidate(35, $$restProps = compute_rest_props($$props, omit_props_names));
    		if ("$$scope" in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
    	};

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*$store*/ 1024) {
    			$$invalidate(9, modals = [...$store.dynamic, ...$store.static]);
    		}

    		if ($$self.$$.dirty[0] & /*modals*/ 512) {
    			$$invalidate(2, modal = modals.find(m => m.props.name === name));
    		}

    		if ($$self.$$.dirty[0] & /*sortedBreakpoints*/ 2048) {
    			sortedBreakpointList = Object.entries(sortedBreakpoints);
    		}
    	};

    	$$invalidate(11, sortedBreakpoints = Object.entries(breakpoints).map(([key, value]) => {
    		const regex = /px|em|rem/;
    		const [unit] = key.match(regex) || [];
    		let rawValue = parseInt(key.replace(regex, ""), 10);

    		if (unit && ["em", "rem"].includes(unit)) {
    			const rootFontSize = parseInt(window.getComputedStyle(document.documentElement).getPropertyValue("font-size").replace("px", ""), 10);
    			rawValue *= rootFontSize;
    		}

    		return [key, value, rawValue];
    	}).sort((a, b) => b[2] - a[2]).reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {}));

    	return [
    		contentElm,
    		currentBreakpoint,
    		modal,
    		name,
    		transition,
    		transitionParams,
    		classes,
    		onMount,
    		$$slots,
    		modals,
    		$store,
    		sortedBreakpoints,
    		$$scope,
    		slots,
    		div0_binding
    	];
    }

    class Modal extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {}, [-1, -1]);
    	}
    }

    /* src/components/Modals.svelte generated by Svelte v3.37.0 */

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	return child_ctx;
    }

    // (8:4) <Modal       {...modal.props}       on:opened={modal.events && modal.events.opened}       on:closed={modal.events && modal.events.closed}     >
    function create_default_slot(ctx) {
    	let switch_instance;
    	let t;
    	let current;
    	const switch_instance_spread_levels = [/*modal*/ ctx[1].componentProps];
    	var switch_value = /*modal*/ ctx[1].component;

    	function switch_props(ctx) {
    		let switch_instance_props = {};

    		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
    			switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    		}

    		return { props: switch_instance_props };
    	}

    	if (switch_value) {
    		switch_instance = new switch_value(switch_props());
    	}

    	return {
    		c() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			t = space();
    		},
    		m(target, anchor) {
    			if (switch_instance) {
    				mount_component(switch_instance, target, anchor);
    			}

    			insert(target, t, anchor);
    			current = true;
    		},
    		p(ctx, dirty) {
    			const switch_instance_changes = (dirty & /*$modals*/ 1)
    			? get_spread_update(switch_instance_spread_levels, [get_spread_object(/*modal*/ ctx[1].componentProps)])
    			: {};

    			if (switch_value !== (switch_value = /*modal*/ ctx[1].component)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = new switch_value(switch_props());
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, t.parentNode, t);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (switch_instance) destroy_component(switch_instance, detaching);
    			if (detaching) detach(t);
    		}
    	};
    }

    // (7:2) {#each $modals.dynamic as modal (modal.props.name)}
    function create_each_block(key_1, ctx) {
    	let first;
    	let modal;
    	let current;
    	const modal_spread_levels = [/*modal*/ ctx[1].props];

    	let modal_props = {
    		$$slots: { default: [create_default_slot] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < modal_spread_levels.length; i += 1) {
    		modal_props = assign(modal_props, modal_spread_levels[i]);
    	}

    	modal = new Modal({ props: modal_props });

    	modal.$on("opened", function () {
    		if (is_function(/*modal*/ ctx[1].events && /*modal*/ ctx[1].events.opened)) (/*modal*/ ctx[1].events && /*modal*/ ctx[1].events.opened).apply(this, arguments);
    	});

    	modal.$on("closed", function () {
    		if (is_function(/*modal*/ ctx[1].events && /*modal*/ ctx[1].events.closed)) (/*modal*/ ctx[1].events && /*modal*/ ctx[1].events.closed).apply(this, arguments);
    	});

    	return {
    		key: key_1,
    		first: null,
    		c() {
    			first = empty();
    			create_component(modal.$$.fragment);
    			this.first = first;
    		},
    		m(target, anchor) {
    			insert(target, first, anchor);
    			mount_component(modal, target, anchor);
    			current = true;
    		},
    		p(new_ctx, dirty) {
    			ctx = new_ctx;

    			const modal_changes = (dirty & /*$modals*/ 1)
    			? get_spread_update(modal_spread_levels, [get_spread_object(/*modal*/ ctx[1].props)])
    			: {};

    			if (dirty & /*$$scope, $modals*/ 17) {
    				modal_changes.$$scope = { dirty, ctx };
    			}

    			modal.$set(modal_changes);
    		},
    		i(local) {
    			if (current) return;
    			transition_in(modal.$$.fragment, local);
    			current = true;
    		},
    		o(local) {
    			transition_out(modal.$$.fragment, local);
    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(first);
    			destroy_component(modal, detaching);
    		}
    	};
    }

    function create_fragment(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let current;
    	let each_value = /*$modals*/ ctx[0].dynamic;
    	const get_key = ctx => /*modal*/ ctx[1].props.name;

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
    	}

    	return {
    		c() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr(div, "class", "js-modals");
    		},
    		m(target, anchor) {
    			insert(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div, null);
    			}

    			current = true;
    		},
    		p(ctx, [dirty]) {
    			if (dirty & /*$modals*/ 1) {
    				each_value = /*$modals*/ ctx[0].dynamic;
    				group_outros();
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
    				check_outros();
    			}
    		},
    		i(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o(local) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d(detaching) {
    			if (detaching) detach(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};
    }

    function instance($$self, $$props, $$invalidate) {
    	let $modals;
    	component_subscribe($$self, store, $$value => $$invalidate(0, $modals = $$value));
    	return [$modals];
    }

    class Modals extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance, create_fragment, safe_not_equal, {});
    	}
    }

    /* eslint-disable no-console, import/prefer-default-export */
    const error = (message) => {
      if (!message) {
        return;
      }

      console.error(`[smodale] ${message}`);
    };

    const getModalByName = (name) => {
      const state = store.getState();

      return [...state.static, ...state.dynamic].find((m) => m.props.name === name);
    };

    const removeModalByName = (name) => {
      store.update((modals) => ({
        static: modals.static.filter((m) => m.props.name !== name),
        dynamic: modals.dynamic.filter((m) => m.props.name !== name),
      }));
    };

    const showStaticModal = (name, resolve, reject, hide, cancel) => {
      store.update((modals) => ({
        static: [
          ...modals.static,
          {
            props: { name },
            resolve,
            reject,
            hide,
            cancel,
          },
        ],
        dynamic: modals.dynamic,
      }));
    };

    const showDynamicModal = (
      resolve,
      reject,
      hide,
      cancel,
      component,
      componentProps,
      props,
      events
    ) => {
      const modalsElm = document.getElementsByClassName('js-modals')[0];

      if (!modalsElm) {
        // eslint-disable-next-line no-new
        new Modals({ target: document.body });
      }

      store.update((modals) => {
        const prefix = (props && props.name) || 'modal';

        return {
          static: modals.static,
          dynamic: [
            ...modals.dynamic,
            {
              component,
              componentProps,
              props: {
                ...props,
                name: `${prefix}-${modals.dynamic.length}`,
              },
              events,
              resolve,
              reject,
              hide,
              cancel,
            },
          ],
        };
      });
    };

    const resolvePromiseAndRemoveModal = (method, name, data) => {
      const modal = getModalByName(name);

      if (!modal) {
        return;
      }

      modal[method](data);

      removeModalByName(name);
    };

    var plugin = {
      show(...args) {
        const [name] = args;

        if (!name) {
          error('name missing');
          return Promise;
        }

        return new Promise((resolve, reject) => {
          const modal = getModalByName(name);

          if (modal) {
            error(`Name ${name} already exists. You must provide an unique one.`);
            return;
          }

          const baseArgs = [resolve, reject, this.hide, this.cancel];

          if (typeof name === 'string') {
            showStaticModal(name, ...baseArgs);
          } else if (typeof name === 'function') {
            showDynamicModal(...baseArgs, ...args);
          } else {
            error('Invalid name or component');
          }
        });
      },
      hide(name, data) {
        resolvePromiseAndRemoveModal('resolve', name, data);
      },
      cancel(name, data) {
        resolvePromiseAndRemoveModal('reject', name, data);
      },
    };

    exports.Modal = Modal;
    exports.ModalDismissReasons = ModalDismissReasons;
    exports.default = plugin;
    exports.getModalContext = getModalContext;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
